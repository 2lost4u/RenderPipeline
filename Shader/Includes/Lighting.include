
#include "Includes/Light.include"
#include "Includes/LightingModels.include"
#include "Includes/Material.include"
#include "Includes/ParabolicTransform.include"
#include "Includes/ShadowSource.include"
#include "Includes/PositionReconstruction.include"

uniform vec3 cameraPosition;
uniform samplerCube fallbackCubemap;

const mat4 shadowBiasMatrix = mat4(
    0.5, 0.0, 0.0, 0.0,
    0.0, 0.5, 0.0, 0.0,
    0.0, 0.0, 0.5, 0.0,
    0.5, 0.5, 0.5, 1.0
);

uniform sampler2D shadowAtlas;


vec2 poissonDisk16[16] = vec2[](
    vec2(-0.7465202f, 0.4490219f),
    vec2(-0.6181046f, -0.07440206f),
    vec2(-0.1727871f, 0.003316618f),
    vec2(-0.05351699f, 0.5800206f),
    vec2(-0.4816332f, 0.7933055f),
    vec2(0.3972999f, 0.5579593f),
    vec2(0.4309787f, 0.08007714f),
    vec2(0.2419288f, -0.3548587f),
    vec2(0.5491309f, -0.6481215f),
    vec2(0.8807998f, 0.05989922f),
    vec2(0.8262667f, 0.4751753f),
    vec2(-0.3848403f, -0.5126396f),
    vec2(0.1026901f, -0.7473215f),
    vec2(-0.8397139f, -0.4312865f),
    vec2(0.145882f, 0.9274838f),
    vec2(0.88617f, -0.3436382f)
);




vec2 convertAtlasCoord(vec2 rawCoord, ShadowSource source) {

    float factor = float(source.resolution) / SHADOW_MAP_ATLAS_SIZE;
    float factorBy1 = 1.0 / SHADOW_MAP_ATLAS_SIZE;
    return ( clamp(rawCoord * factor, factorBy1, 1.0 - factorBy1) + source.atlasPos);
}



vec3 computeLightModel(Light light, BaseMaterial material, vec3 l, vec3 v, vec3 n, vec3 h, float attenuation) {
    float roughness = clamp(material.roughness, 0.005, 1.0);
    float specular = material.specular;
    float refractiveFactor = material.metallic * 0.5 + 0.5;

    vec3 diffuseColor = material.baseColor * (1.0 - material.metallic);
    vec3 specularColor = material.baseColor * (material.metallic) + specular * (1.0 - material.metallic);

    // Compute reflection
    vec3 reflectedDir = reflect( v, n);

    float cubemapResolutionParameter = material.roughness;
    vec3 reflection1 = textureLod(fallbackCubemap, reflectedDir.xzy, cubemapResolutionParameter * 10.0).rgb;
    vec3 reflection2 = textureLod(fallbackCubemap, reflectedDir.xzy, cubemapResolutionParameter * 10.0 - 1.0).rgb;
    vec3 reflectedColor = reflection1*0.5 + reflection2*0.5;

    // Compute specular BRDF
    float specG = clamp(specularBrdfG(l, v, h, n, roughness), 0, 1);
    vec3  specF = clamp(specularBrdfFresnel(specularColor, safeDot(v, n)  ) , 0, 1);

    // D is not clamped, highlights can get very bright
    float specD = specularBrdfD(n, h, roughness); 

    // Compute diffuse BRDF
    // vec3 diffuseBrdf = diffuseBrdfOrenNayar(l, v, n) * safeDot(n, l);
    vec3 diffuseBrdf = vec3(diffuseBrdfSimpleOrenNayar(l, v, n, 1.5));


    // Combine specular
    vec3 specularTerm = (specF * specG * specD) * max(0.0, 4.0 * dot(n, l) * dot(n, v));

    // Compute total contributions
    vec3 diffuseContribution = diffuseColor * diffuseBrdf * attenuation * light.color;
    vec3 specularContribution = specularTerm * attenuation * light.color * specular; 
    vec3 refractiveContribution = reflectedColor * refractiveFactor * specularColor * specF * attenuation * light.color * safeDot(n, l);


    vec3 combinedContribution = refractiveContribution + diffuseContribution + specularContribution;
    return combinedContribution;


}


float computePointLightAttenuation(Light light, float distanceToLight) {
    float attenuation = pow(1.0 + (distanceToLight / light.radius) , -2.0) * 1.0;
    float normfac = pow(1.0 + (1.0/light.radius) , 2.0);
    attenuation *= normfac;

    // Cut light transition starting at 80%. Otherwise it's exponential and never gets really 0
    float cutoff = light.radius * 0.8;
    float cutoffFactor = 0.25;
    attenuation *= 1.0 - smoothstep(0.0, 1.0, ((distanceToLight / cutoff) - 1.0) * 4.0 );   
    attenuation = max(0.0, attenuation);
    return attenuation;
}

vec3 applyPointLight(Light light, BaseMaterial material) {

    float distanceToLight = distance(material.position, light.position);   
    float distanceRelative = distanceToLight / light.radius; 
    float attenuation = computePointLightAttenuation(light, distanceToLight);

    vec3  l = normalize(light.position - material.position);
    vec3  v = normalize(cameraPosition - material.position);
    vec3  n = normalize(material.normal);
    vec3  h = normalize(l + v);

    return computeLightModel(light, material, l,v, n, h, attenuation);
}


vec3 applyPointLightWithShadow(Light light, BaseMaterial material) {

    vec3 rawLighting = applyPointLight(light, material);

    // apply point light shadows
    float shadowFactor = 0.0;

    // For point lights we can decide by position which shadow map to use
    // int shadowIndex = light.position.y < material.position.y ? 1 : 0;
    int shadowIndex = int(step(light.position.y, material.position.y));
    int shadowSourceIndex = light.sourceIndexes[shadowIndex];

    ShadowSource currentSource = shadowSources[shadowSourceIndex]; 

    float resolutionFactor = SHADOW_MAP_ATLAS_SIZE / float(currentSource.resolution);
    float sampleFactor = 1.5 / SHADOW_MAP_ATLAS_SIZE;

    vec4 projected = currentSource.mvp * vec4(material.position, 1);
    projected = transformParabol(projected, currentSource.nearPlane, currentSource.farPlane);
    projected = shadowBiasMatrix * projected;                 
    vec3 projCoord = projected.xyz / projected.w;
    // float bias = 0.002 * (0.2 + distanceRelative*0.8) * (1.0 + resolutionFactor*0.2) ;
    float bias = 0.002 * (0.2 + 1.0 * 0.8) * (1.0 + resolutionFactor*0.2) ;

    vec2 centerCoord = convertAtlasCoord(projCoord.xy, currentSource);
   
    for (int i = 0; i < SHADOWS_NUM_SAMPLES; i++) {
        // vec2 offset = poissonDisk16[i] * sampleFactor;
        vec2 offset = vec2(0);
        float sampled = textureLod(shadowAtlas, centerCoord + offset , 0).rg;

        shadowFactor += step(sampled, projCoord.z - bias) / SHADOWS_NUM_SAMPLES;        
    }

    // Apply shadows
    rawLighting *= max(0.0, 1.0 - shadowFactor);
    // return vec3(1.0 - shadowFactor) * 0.1;
    return rawLighting;
}




#if 0


vec3 computeLighting(Light light, BaseMaterial material) {

    float attenuation = 0.5;
    float distanceRelative = 0.0;
    float distanceToLight = 0.0;
    vec3 l;



    // Point light
    if (light.lightType == 1) {  

        // Compute distance to light
        distanceToLight = distance(material.position, light.position);   
        distanceRelative = distanceToLight / light.radius; 


        // Compute attenuation
        attenuation = pow(1.0 + (distanceToLight / light.radius) , -2.0) * 1.0;
        float normfac = pow(1.0 + (1.0/light.radius) , 2.0);
        attenuation *= normfac;

        // Cut light transition starting at 80%. Otherwise it's exponential and never gets really 0
        float cutoff = light.radius * 0.8;
        float cutoffFactor = 0.25;
        attenuation *= 1.0 - smoothstep(0.0, 1.0, ((distanceToLight / cutoff) - 1.0) * 4.0 );   
        attenuation = max(0.0, attenuation);

        l = normalize(light.position - material.position);


    // Directional light
    } else if (light.lightType == 2) {

        distanceToLight = 9999999; // very far
        distanceRelative = 1.0;
        attenuation = 1.0;
        l = light.direction;

    }


    // Compute vectors

    vec3 v = normalize(cameraPosition - material.position);
    vec3 n = normalize(material.normal);
    vec3 h = normalize(l + v);

    #ifdef USE_SIMPLE_LIGHTING

        return safeDot(n, l) * attenuation * light.color * material.baseColor;


    #else


        float roughness = clamp(material.roughness, 0.005, 1.0);
        float specular = material.specular;

        float refractiveFactor = material.metallic * 0.5 + 0.5;

        vec3 diffuseColor = material.baseColor * (1.0 - material.metallic);
        vec3 specularColor = material.baseColor * (material.metallic) + specular * (1.0 - material.metallic);

        // Compute reflection
        vec3 reflectedDir = reflect( v, n);



        float cubemapResolutionParameter = material.roughness;
        vec3 reflection1 = textureLod(fallbackCubemap, reflectedDir.xzy, cubemapResolutionParameter * 10.0).rgb;
        vec3 reflection2 = textureLod(fallbackCubemap, reflectedDir.xzy, cubemapResolutionParameter * 10.0 - 1.0).rgb;
        vec3 reflectedColor = reflection1*0.5 + reflection2*0.5;

        // Compute specular BRDF
        float specG = clamp(specularBrdfG(l, v, h, n, roughness), 0, 1);
        vec3  specF = clamp(specularBrdfFresnel(specularColor, safeDot(v, n)  ) , 0, 1);

        // D is not clamped, highlights can get very bright
        float specD = specularBrdfD(n, h, roughness); 

        // Compute diffuse BRDF
        // vec3 diffuseBrdf = diffuseBrdfOrenNayar(l, v, n) * safeDot(n, l);
        vec3 diffuseBrdf = vec3(diffuseBrdfSimpleOrenNayar(l, v, n, 1.5));


        // Combine specular
        vec3 specularTerm = (specF * specG * specD) * max(0.0, 4.0 * dot(n, l) * dot(n, v));

        // Compute total contributions
        vec3 diffuseContribution = diffuseColor * diffuseBrdf * attenuation * light.color;
        vec3 specularContribution = specularTerm * attenuation * light.color * specular; 
        vec3 refractiveContribution = reflectedColor * refractiveFactor * specularColor * specF * attenuation * light.color * safeDot(n, l);


        vec3 combinedContribution = refractiveContribution + diffuseContribution + specularContribution;



        #ifdef USE_SHADOWS

        // Compute shadows
        float shadowFactor = 0.0;
        // if (attenuation > 0.0) {


            vec3 lightFactor = vec3(0);

            // For point lights we can decide by position
            // for (int shadowIndex = 0; shadowIndex < 6; shadowIndex ++) {

                int shadowIndex = light.position.y < material.position.y ? 1 : 0;
                int shadowSourceIndex = light.sourceIndexes[shadowIndex];

                if (shadowSourceIndex >= 0) {
                    ShadowSource currentSource = shadowSources[shadowSourceIndex]; 

                    float resolutionFactor = SHADOW_MAP_ATLAS_SIZE / float(currentSource.resolution);
                    float sampleFactor = 1.5 / SHADOW_MAP_ATLAS_SIZE;

                    vec4 projected = currentSource.mvp * vec4(material.position, 1);
                    projected = transformParabol(projected, currentSource.nearPlane, currentSource.farPlane);
                    projected = shadowBiasMatrix * projected;                 
                    vec3 projCoord = projected.xyz / projected.w;
                    // vec3 projCoord = projected.xyz;

                    // bool shadowed = projCoord.y > 0.0 && projCoord.x >= 0.0 
                    //                 && projCoord.x < 1.0 && projCoord.y < 1.0
                    //                  && projCoord.z < 1.0 && projCoord.z > 0.0;

                    float bias = 0.002 * (0.2 + distanceRelative*0.8) * (1.0 + resolutionFactor*0.2) ;

                    // shadowed = true;
// 
                    // if (shadowed) {

                        float shadowInfluence = 0.0;

                        vec2 centerCoord = convertAtlasCoord(projCoord.xy, currentSource);
                       
                        for (int i = 0; i< SHADOWS_NUM_SAMPLES; i++) {

                            vec2 offset = poissonDisk16[i] * sampleFactor;
                            // vec2 offset = vec2(0);
                            vec2 rawSampled = textureLod(shadowAtlas, centerCoord + offset , 0).rg;
                            float sampled = unpackDepth(rawSampled);


                            shadowInfluence += step(sampled, projCoord.z - bias) / SHADOWS_NUM_SAMPLES; 
                            // shadowInfluence = sampled;
                            
                        }

                        // if (shadowInfluence > shadowFactor) {
                            shadowFactor = shadowInfluence;
                            // shadowFactor = sampleFactor * 50.0;
                        // }
                        
                        float ff = float(shadowIndex) / 1.0;
                        lightFactor += vec3(ff, 1.0 - ff, 0)*0.5;
                    // } 
                }
            // }
        // }

        combinedContribution *= max(0.0, 1.0 - shadowFactor);
        // combinedContribution *= 0.5 + lightFactor;

        // combinedContribution = vec3(shadowFactor) * attenuation;
        #endif

        // combinedContribution = diffuseBrdf * light.color;
        // combinedContribution = max(vec3(0.0), vec3(attenuation) );


        // combinedContribution = vec3(reflectedDir);

        return combinedContribution.xyz;

    #endif

}



#endif