#pragma once

// GLSL really needs this as a builtin!
#define saturate(v) clamp(v, 0, 1)

// Constructs a normal from a normal, binormal and tangent
vec3 mergeNormal(inout vec3 detailNormal, float detailFactor, vec3 normal, vec3 tangent, vec3 binormal) {
    detailNormal = mix(vec3(0,0,1), detailNormal, detailFactor);

    // Seperate normalization
    vec3 normalizedDetailNormal = normalize(detailNormal);
    return normalize(
        (tangent * normalizedDetailNormal.x) + 
        (binormal * normalizedDetailNormal.y) + 
        (normalize(normal) * normalizedDetailNormal.z)
    );
}

// vec4 transformParabol(vec4 transformed, float near, float far) {
//     if (transformed.w < 0.0) return vec4(0,0,0,-1000);
//     float l = length(transformed.xyz);
//     transformed /= l;
//     transformed.z += 1;
//     transformed.xy /= transformed.z;   
//     transformed.z = (l - near) / (far - near);
//     transformed.w = 1;
//     return transformed;
// }


ivec3 convert_2d_to_3d(ivec2 coord, int slice_res, int slice_size) {
    return ivec3(coord % slice_res, int(coord.x / slice_res) + int(coord.y / slice_res) * slice_size);
}