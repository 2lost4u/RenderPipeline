#version 430

#pragma include "Includes/Configuration.include"
#pragma include "Includes/Structures/VoxelDirections.struct"

uniform isampler3D voxelGenSrcR;
uniform isampler3D voxelGenSrcG;
uniform isampler3D voxelGenSrcB;
// uniform writeonly image3D dest;


#if defined(USE_DEBUG_ATTACHMENTS)
out vec4 color;
#endif

uniform writeonly image3D voxelDataDest0;
uniform writeonly image3D voxelDataDest1;
uniform writeonly image3D voxelDataDest2;
uniform writeonly image3D voxelDataDest3;
uniform writeonly image3D voxelDataDest4;


VoxelDirections unpackData(int packedData) {
    VoxelDirections dir;
    float scaleF = 2.0;
    dir.posX = ((packedData >> 0*5) & 0x1F) / 31.0 * scaleF;
    dir.negX = ((packedData >> 1*5) & 0x1F) / 31.0 * scaleF;
    dir.posY = ((packedData >> 2*5) & 0x1F) / 31.0 * scaleF;
    dir.negY = ((packedData >> 3*5) & 0x1F) / 31.0 * scaleF;
    dir.posZ = ((packedData >> 4*5) & 0x1F) / 31.0 * scaleF;
    dir.negZ = ((packedData >> 5*5) & 0x1F) / 31.0 * scaleF;
    return dir;
}



void main() {
    ivec2 coord = ivec2(gl_FragCoord.xy);
        
    // Compute 3D Coordinate from 2D Coordinate
    int z = int(coord.x / GI_GRID_RESOLUTION) + int(coord.y / GI_GRID_RESOLUTION) * GI_SLIDE_COUNT;
    ivec3 localCoord = ivec3(coord % GI_GRID_RESOLUTION, z);

   
    int valR = texelFetch(voxelGenSrcR, localCoord, 0).x;
    int valG = texelFetch(voxelGenSrcG, localCoord, 0).x;
    int valB = texelFetch(voxelGenSrcB, localCoord, 0).x;

    VoxelDirections voxelR = unpackData(valR);
    VoxelDirections voxelG = unpackData(valG);
    VoxelDirections voxelB = unpackData(valB);

    float solid = (valR > 1 || valG > 1 || valB > 1) ? 1 : 0; 

    imageStore(voxelDataDest0, localCoord, vec4(voxelR.posX, voxelR.negX, voxelR.posY, voxelR.negY));
    imageStore(voxelDataDest1, localCoord, vec4(voxelR.posZ, voxelR.negZ, voxelG.posX, voxelG.negX));
    imageStore(voxelDataDest2, localCoord, vec4(voxelG.posY, voxelG.negY, voxelG.posZ, voxelG.negZ));
    imageStore(voxelDataDest3, localCoord, vec4(voxelB.posX, voxelB.negX, voxelB.posY, voxelB.negY));
    imageStore(voxelDataDest4, localCoord, vec4(voxelB.posZ, voxelB.negZ, 0, solid));

    #if defined(USE_DEBUG_ATTACHMENTS)
        color = vec4(
                voxelR.posX + voxelR.negX + voxelR.posY + voxelR.negY + voxelR.posZ + voxelR.negZ,
                voxelG.posX + voxelG.negX + voxelG.posY + voxelG.negY + voxelG.posZ + voxelG.negZ,
                voxelB.posX + voxelB.negX + voxelB.posY + voxelB.negY + voxelB.posZ + voxelB.negZ, 1);
    #endif

}