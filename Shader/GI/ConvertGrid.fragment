#version 430

#pragma include "Includes/Configuration.include"

uniform isampler3D voxelGenSrcR;
uniform isampler3D voxelGenSrcG;
uniform isampler3D voxelGenSrcB;

#if defined(USE_DEBUG_ATTACHMENTS)
out vec4 color;
#endif

uniform writeonly image3D voxelDataDest0;
uniform writeonly image3D voxelDataDest1;
uniform writeonly image3D voxelDataDest2;
uniform writeonly image3D voxelDataDest3;
uniform writeonly image3D voxelDataDest4;

struct VoxelDirections {
    float posX;
    float negX;
    float posY;
    float negY;
    float posZ;
    float negZ;
};

VoxelDirections unpackData(int packedData) {
    VoxelDirections dir;
    float scaleF = 0.01;
    dir.posX = ((packedData >> 0*5) & 0x1F) / 31.0 * scaleF;
    dir.negX = ((packedData >> 1*5) & 0x1F) / 31.0 * scaleF;
    dir.posY = ((packedData >> 2*5) & 0x1F) / 31.0 * scaleF;
    dir.negY = ((packedData >> 3*5) & 0x1F) / 31.0 * scaleF;
    dir.posZ = ((packedData >> 4*5) & 0x1F) / 31.0 * scaleF;
    dir.negZ = ((packedData >> 5*5) & 0x1F) / 31.0 * scaleF;
    return dir;
}

void main() {
    ivec2 coord = ivec2(gl_FragCoord.xy);
    ivec3 coord3D = convert_2d_to_3d(coord, GI_GRID_RESOLUTION, GI_SLIDE_COUNT);

    int valR = texelFetch(voxelGenSrcR, coord3D, 0).x;
    int valG = texelFetch(voxelGenSrcG, coord3D, 0).x;
    int valB = texelFetch(voxelGenSrcB, coord3D, 0).x;

    VoxelDirections voxelR = unpackData(valR);
    VoxelDirections voxelG = unpackData(valG);
    VoxelDirections voxelB = unpackData(valB);

    float solid = step(1, max(valR, max(valG, valB))); 

    imageStore(voxelDataDest0, coord3D, vec4(voxelR.posX, voxelG.posX, voxelB.posX,  voxelR.negZ));
    imageStore(voxelDataDest1, coord3D, vec4(voxelR.negX, voxelG.negX, voxelB.negX,  voxelG.negZ));
    imageStore(voxelDataDest2, coord3D, vec4(voxelR.posY, voxelG.posY, voxelB.posY,  voxelB.negZ));
    imageStore(voxelDataDest3, coord3D, vec4(voxelR.negY, voxelG.negY, voxelB.negY,  0));
    imageStore(voxelDataDest4, coord3D, vec4(voxelR.posZ, voxelG.posZ, voxelB.posZ,  solid));

    #if defined(USE_DEBUG_ATTACHMENTS)
        color = vec4(
                voxelR.posX + voxelR.negX + voxelR.posY + voxelR.negY + voxelR.posZ + voxelR.negZ,
                voxelG.posX + voxelG.negX + voxelG.posY + voxelG.negY + voxelG.posZ + voxelG.negZ,
                voxelB.posX + voxelB.negX + voxelB.posY + voxelB.negY + voxelB.posZ + voxelB.negZ, 1) * 10.0;
        color += vec4(1,1, 0, 1) * solid;
    #endif



}