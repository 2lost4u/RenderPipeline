#version 430

#pragma include "Includes/Configuration.include"


// Unrolling speeds up this pass a lot on nvidia cards
#pragma optionNV (unroll all)

#if defined(USE_DEBUG_ATTACHMENTS)
out vec4 color;
#endif

uniform coherent writeonly image3D dst0;
uniform coherent writeonly image3D dst1;
uniform coherent writeonly image3D dst2;
uniform coherent writeonly image3D dst3;
uniform coherent writeonly image3D dst4;

uniform sampler3D src0;
uniform sampler3D src1;
uniform sampler3D src2;
uniform sampler3D src3;
uniform sampler3D src4;

struct Voxel {
    vec3 posX;
    vec3 negX;
    vec3 posY;
    vec3 negY;
    vec3 posZ;
    vec3 negZ;
    bool solid;
};

Voxel fetchVoxel(vec3 coord) {

    // textureLod() seems to be the fastest, even faster than texelFetch() and texture()
    vec4 sample0 = textureLod(src0, coord, 0);
    vec4 sample1 = textureLod(src1, coord, 0);
    vec4 sample2 = textureLod(src2, coord, 0);
    vec4 sample3 = textureLod(src3, coord, 0);
    vec4 sample4 = textureLod(src4, coord, 0);
    
    Voxel v;

    v.posX = vec3(sample0.x, sample0.y, sample0.z);
    v.negX = vec3(sample1.x, sample1.y, sample1.z);
    v.posY = vec3(sample2.x, sample2.y, sample2.z);
    v.negY = vec3(sample3.x, sample3.y, sample3.z);
    v.posZ = vec3(sample4.x, sample4.y, sample4.z);

    v.negZ = vec3(sample0.w, sample1.w, sample2.w);

    v.solid = sample4.w > 0.1;
    return v;
}

void storeVoxel(ivec3 coord, Voxel v) {
    imageStore(dst0, coord, vec4(v.posX.r, v.posX.g, v.posX.b,    v.negZ.r));
    imageStore(dst1, coord, vec4(v.negX.r, v.negX.g, v.negX.b,    v.negZ.g));
    imageStore(dst2, coord, vec4(v.posY.r, v.posY.g, v.posY.b,    v.negZ.b));
    imageStore(dst3, coord, vec4(v.negY.r, v.negY.g, v.negY.b,    0));
    imageStore(dst4, coord, vec4(v.posZ.r, v.posZ.g, v.posZ.b,    v.solid ? 1.0 : 0.0));
}


// Preventing a lot of code duplicating by making this a define
#define EVALUATE_DIRECTION(DIR_NAME, NEG_DIR_NAME, TEMPL0, TEMPL1, TEMPL2)  \
for (int c1 = -1; c1 <= 1; c1++) {     \
    for (int c2 = -1; c2 <= 1; c2++) {    \
        Voxel tmp = fetchVoxel(floatCoord3D + vec3( TEMPL0, TEMPL1, TEMPL2 ) * voxelSize);\
        v. DIR_NAME += tmp. DIR_NAME * distributionFactor * (saturate(1.0  - 0.1*(length(vec2(c1, c2))))); \
        if (tmp.solid) {\
            v. DIR_NAME += v. NEG_DIR_NAME * bounceFactor;\
        }\
        \
    } \
}

uniform bool isLastStep;

void main() {
    ivec2 coord = ivec2(gl_FragCoord.xy);
    ivec3 coord3D = convert_2d_to_3d(coord, GI_GRID_RESOLUTION, GI_SLIDE_COUNT);
    vec3 floatCoord3D = (coord3D+0.5) / GI_GRID_RESOLUTION;
    float voxelSize = 1.0 / GI_GRID_RESOLUTION;

    // Fetch current voxel
    Voxel v = fetchVoxel(floatCoord3D);

    float distributionFactor = 0.027;
    float bounceFactor = distributionFactor * 0.0;

    // Evaluate each direction
    if (!v.solid || isLastStep) {
        EVALUATE_DIRECTION(posX, negX, -1, c1, c2 );
        EVALUATE_DIRECTION(negX, posX, 1, c1, c2 );
        EVALUATE_DIRECTION(posY, negY, c1, -1, c2 );
        EVALUATE_DIRECTION(negY, posY, c1, 1, c2 );
        EVALUATE_DIRECTION(posZ, negZ, c1, c2, -1 );
        EVALUATE_DIRECTION(negZ, posZ, c1, c2, 1 );
    }

    // Store the modified voxel
    storeVoxel(coord3D, v);

    #if defined(USE_DEBUG_ATTACHMENTS)
        color = vec4(v.posX + v.negX + v.posZ + v.negZ + v.posY + v.negY, 1);
    #endif
}
