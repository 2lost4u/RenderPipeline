#version 440

#extension GL_ARB_shader_image_load_store : enable

// TODO: Make some benchmarks to see wheter unrolling
// is faster or slower ..

// EDIT: As of now, not unrolling is faster
// #pragma optionNV (unroll all)


#include "Includes/Configuration.include"
#include "Includes/Light.include"
#include "Includes/Material.include"
#include "Includes/ShadowSource.include"
#include "Includes/ColorCorrection.include"

layout(rgba16f) readonly uniform image2D data0;
layout(rgba16f) readonly uniform image2D data1;
layout(rgba16f) readonly uniform image2D data2;

// uniform sampler2D lightsPerTile;
layout (r32i) readonly uniform iimage2D lightsPerTile;


layout(rgba16f) writeonly uniform image2D destination;

layout(local_size_x = LIGHTING_COMPUTE_PATCH_SIZE_X, local_size_y = LIGHTING_COMPUTE_PATCH_SIZE_Y) in;

uniform Light lights[MAX_VISIBLE_LIGHTS]; 
uniform ShadowSource shadowSources[SHADOW_MAX_TOTAL_MAPS]; 



// Has to be after the uniforms
#include "Includes/Lighting.include"

void main() {

    ivec2 screenCoord = ivec2(gl_GlobalInvocationID.xy);
    // ivec2 precomputeSize = imageSize(lightsPerTile) / ivec2(8);
    // ivec2 precomputeCoord = ivec2(texcoord * precomputeSize) * ivec2(8);
    ivec2 precomputeCoord = ivec2( vec2(screenCoord) / vec2(LIGHTING_COMPUTE_PATCH_SIZE_X, LIGHTING_COMPUTE_PATCH_SIZE_Y)) * 8;

    // // Extract material data
    vec4 target0data = imageLoad(data0, screenCoord);
    vec4 target1data = imageLoad(data1, screenCoord);
    vec4 target2data = imageLoad(data2, screenCoord);

    BaseMaterial material = unpackBaseMaterial(target0data, target1data, target2data);



    // Fetch number of lights for this tile
    // int tileLightCount = int( texelFetch(lightsPerTile, precomputeCoord, 0).r * float(MAX_LIGHTS_PER_PATCH) );
    int tileLightCount = imageLoad(lightsPerTile, precomputeCoord).r;
    int numActiveLights = min(tileLightCount, MAX_LIGHTS_PER_PATCH);



    vec3 result = vec3(0.0);


    // result = material.position;

    // Compute each light which affects this tile
    for (int i = 0; i < numActiveLights; i++) {

        // Light index is offsetted by 1, because at position 0 
        // the number of lights is stored
        int index = i+1;

        // Compute offset by index
        ivec2 offset = ivec2(index % 8, index / 8);

        // Extract light id from texture, and fetch data for that light
        int lightId = imageLoad(lightsPerTile, precomputeCoord + offset).r;


        // Convert to light struct
        Light currentLight = lights[lightId];
        result += computeLighting(currentLight, material);

    }


    // if ( distance(material., vec3(1,1,0) ) < 0.001 ) {
    //     result = vec3(1,1,0);
    // }



    float lightsVisibleFloat = float(numActiveLights) / float(MAX_LIGHTS_PER_PATCH);
    vec3 lightCountIndicator = vec3(lightsVisibleFloat, 1.0 - lightsVisibleFloat , 0);

    float borderFactor = 0.0;
    if (screenCoord.x % LIGHTING_COMPUTE_PATCH_SIZE_X == 0 || screenCoord.y % LIGHTING_COMPUTE_PATCH_SIZE_Y == 0) {
        borderFactor = 1.0;
    }


    // HDR Mapping
    result.xyz = 1.0f - exp(-1.0 * result.xyz);
    result.xyz = saturate(result.xyz);

    result.xyz = convertColorSpace(result.xyz);

    // result.xyz = vec3( float(tileLightCount) / 30.0);


    imageStore(destination, screenCoord, vec4(result.xyz,1));
    // gl_FragColor = vec4(result.xyz, 1);
}