// #version 440
// uniform mat4 lightData[64]; 

// // Texture in and outputs
// layout (rgba8)   writeonly uniform image2D destinationImage;

// // Compute shader layout
// layout (local_size_x = 16, local_size_y = 16) in;


// void main() {

//     // Position in compute space
//     ivec2 computePos = ivec2(gl_GlobalInvocationID.xy);

//     vec4 lightingResult = vec4(0);

//     for (int i = 0; i < 4096; i++) {
//         lightingResult += lightData[i%64][0] * 0.01;
//     }

//     vec4 result = vec4(lightingResult.xyz, 1.0);
//     result.xyz = clamp(result.xyz, 0, 1);
//     imageStore(destinationImage, computePos, vec4(result) );
// }

#version 430
layout (rgba8) uniform image2D destinationImage;
layout (rgba16f) readonly uniform image2D minMaxDepthImage;
layout (local_size_x = 16, local_size_y = 16) in;
uniform mat4 lightData[64];
void main() {
    vec4 result = imageLoad(minMaxDepthImage, ivec2(gl_WorkGroupID.xy));
    // vec4 result = vec4(0, 0, 0, 1);
    // for (int i = 0; i < 4096; i ++) {
    //     result.y += lightData[i%64][0][0] / 400.0;
    // }
    ivec2 storePos = ivec2(gl_GlobalInvocationID.xy);
    imageStore(destinationImage, storePos, result);

}