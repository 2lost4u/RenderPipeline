#version 430

#pragma include "Includes/Configuration.include"
#pragma include "Includes/PositionReconstruction.include"
#pragma include "Includes/ApplyScattering.include"

in vec2 texcoord;
out vec4 result;

uniform sampler3D inscatterSampler;
uniform ScatteringOptions scatteringOptions;

uniform sampler2D wsPositionTex;
uniform sampler2D wsNormalTex;
uniform sampler2D basecolorTex;
uniform sampler2D cloudsTex;

uniform vec3 cameraPosition;
uniform int cubemapSize;

layout(rgba16f) uniform imageCube cubemapDest;

void main() {

    ivec2 coord = ivec2(gl_FragCoord.xy);
    ivec2 localCoord = coord % cubemapSize;
    vec2 floatCoord = (localCoord / vec2(cubemapSize)) * 2-1;
    int faceIndex = coord.x / cubemapSize; 


    vec3 baseDir = vec3(0);

    if (faceIndex == 0) baseDir = vec3(1, -floatCoord.y, floatCoord.x);
    else if (faceIndex == 1) baseDir = vec3(-1, -floatCoord.y, -floatCoord.x);
    else if (faceIndex == 2) baseDir = vec3(floatCoord.x, 1, -floatCoord.y);
    else if (faceIndex == 3) baseDir = vec3(floatCoord.x, -1, floatCoord.y);
    else if (faceIndex == 4) baseDir = vec3(floatCoord.x, -floatCoord.y, -1);
    else if (faceIndex == 5) baseDir = vec3(-floatCoord.x, -floatCoord.y, 1);


    baseDir = normalize(baseDir);

    vec3 attenuation = vec3(0);
    float irradianceFactor = 0.0;

    baseDir.z = -baseDir.z;

    vec3 scatteringResult = scatteringComputeInscatteredLight(
        scatteringOptions,
        baseDir * 100000.0, 
        vec3(0,0,0),
        baseDir, 
        inscatterSampler,
        vec4(0),
        true,
        attenuation, 
        irradianceFactor);



    imageStore(cubemapDest, ivec3(localCoord, faceIndex), vec4(scatteringResult, 1.0));

    result = vec4(scatteringResult, 1.0);

}

