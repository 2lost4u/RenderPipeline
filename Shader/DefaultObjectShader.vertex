#version 130

uniform mat4 p3d_ModelViewProjectionMatrix;
uniform mat4 trans_model_to_world;

in vec4 p3d_Vertex;
in vec3 p3d_Normal;
in vec2 p3d_MultiTexCoord0;

out vec3 normalWorldSpace;
out vec3 positionWorldSpace;
out vec2 texcoord;

out vec4 diffuseColor;


void main() {

    // Compute normal in world space
    normalWorldSpace = normalize(trans_model_to_world * vec4(p3d_Normal, 0)).xyz;

    // Compute position in world space
    positionWorldSpace = (trans_model_to_world * p3d_Vertex).xyz;

    // Pass texcoord to fragment shader
    texcoord = p3d_MultiTexCoord0.xy * 0.25;

    gl_Position = p3d_ModelViewProjectionMatrix * p3d_Vertex;

    diffuseColor = gl_FrontMaterial.diffuse;

}